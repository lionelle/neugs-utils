
import unittest
from gradescope_utils.autograder_utils.decorators import number
from neugs_utils.context_managers import Capturing
from neugs_utils import tier, COMMON_ONE, COMMON_TWO, COMMON_THREE, common_msg, strip_prompts
from neugs_utils.common_tests import check_style


student_files = [] # setup incase there are more than one import section

## Autogenerated import based on test-add
try:
    import SimpleCalc
    student_files += ['SimpleCalc.py']
except ImportError:
    try:
        import src.SimpleCalc as SimpleCalc
        student_files += ['src/SimpleCalc.py']
    except ImportError:
        pass


# Double check class name, remember unit tests likes it to start with Test
class TestSimpleCalc(unittest.TestCase):

    @tier(COMMON_ONE) ## mastery grading first tier
    @number("1.0")
    def test_add(self):
        """Test add function with multiple inputs""" 
        self.assertEqual(SimpleCalc.add(1, 2), 3)
        self.assertEqual(SimpleCalc.add(1, 3), 4)
        self.assertEqual(SimpleCalc.add(1, 4), 5)

    @tier(COMMON_ONE) ## mastery grading first tier
    @number("1.1")
    def test_subtract(self):
        """Test subtract function with multiple inputs""" 
        self.assertEqual(SimpleCalc.subtract(1, 2), -1)
        self.assertEqual(SimpleCalc.subtract(1, 3), -2)
        self.assertEqual(SimpleCalc.subtract(1, 4), -3)

    @tier(COMMON_TWO) ## mastery grading second tier
    @number("2.0")
    def test_multiply(self):
        """Test multiply function with multiple inputs""" 
        self.assertEqual(SimpleCalc.multiply(1, 2), 2)
        self.assertEqual(SimpleCalc.multiply(2, 3), 6)
        self.assertEqual(SimpleCalc.multiply(4, 4), 16)

    @tier(COMMON_TWO)
    @number("2.1")
    def test_divide(self):
        """Test divide function with multiple inputs""" 
        self.assertEqual(SimpleCalc.divide(1, 2), 0.5)
        self.assertEqual(SimpleCalc.divide(12, 3), 4.0)
        self.assertEqual(SimpleCalc.divide(4, 4), 1)

    @tier(COMMON_THREE)
    @number("3.0")
    def test_select_function(self)-> None:
        """Tests to make sure the right function is returned based on the string entered. Multiple strings entered"""
        self.assertEqual(SimpleCalc.select_function("+"), SimpleCalc.add)
        self.assertEqual(SimpleCalc.select_function("-"), SimpleCalc.subtract)
        self.assertEqual(SimpleCalc.select_function("*"), SimpleCalc.multiply)
        self.assertEqual(SimpleCalc.select_function("/"), SimpleCalc.divide)


if __name__ == '__main__':
    unittest.main()
